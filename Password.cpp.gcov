        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 58%
        1:   12:int Password::count_leading_characters(string phrase){
        1:   13:  int repetition = 1;
        1:   14:  int index = 0;
       1*:   15:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0
branch  8 taken 1 (fallthrough)
    #####:   16:    repetition++;
    #####:   17:    index++;
        -:   18:  }
        1:   19:  return repetition;
        -:   20:}
        -:   21:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 100%
       14:   22:bool Password::has_mixed_case(string str)
        -:   23:{
       14:   24:  bool has_lower = false;
       14:   25:  bool has_upper = false;
      117:   26:  for (char ch : str)
call    0 returned 14
call    1 returned 14
call    2 returned 103
call    3 returned 103
call    4 returned 117
branch  5 taken 103
branch  6 taken 14 (fallthrough)
        -:   27:  {
      103:   28:    if (std::islower(ch))
branch  0 taken 40 (fallthrough)
branch  1 taken 63
        -:   29:    {
       40:   30:      has_lower = true;
        -:   31:    }
       63:   32:    else if (std::isupper(ch))
branch  0 taken 38 (fallthrough)
branch  1 taken 25
        -:   33:    {
       38:   34:      has_upper = true;
        -:   35:    }
        -:   36:  }
       14:   37:  return has_lower && has_upper;
branch  0 taken 9 (fallthrough)
branch  1 taken 5
branch  2 taken 6 (fallthrough)
branch  3 taken 3
        -:   38:}
